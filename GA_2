import sys
class RC4:
    def __init__(self, key):
        self.key = key
        self.S = list(range(256))
        self.i = 0
        self.j = 0
        self.key_schedule()

    def key_schedule(self):
        j = 0
        key_length = len(self.key)
        for i in range(256):
            j = (j + self.S[i] + ord(self.key[i % key_length])) % 256
            self.S[i], self.S[j] = self.S[j], self.S[i]

    def generate_byte(self):
        self.i = (self.i + 1) % 256
        self.j = (self.j + self.S[self.i]) % 256
        self.S[self.i], self.S[self.j] = self.S[self.j], self.S[self.i]
        return self.S[(self.S[self.i] + self.S[self.j]) % 256]

    def encrypt(self, plaintext):
        ciphertext = []
        for byte in plaintext:
            ciphertext.append(byte ^ self.generate_byte())
        return bytes(ciphertext)

def print_bytes(label, data):
    print(f"{label}:")
    print("  Hex:", ' '.join([f'{b:02x}' for b in data]))
    print("  Int:", ' '.join([str(b) for b in data]))

def main():
    if len(sys.argv) == 3:
        with open(sys.argv[1], 'r') as key_file:
            key = key_file.read().strip()
        with open(sys.argv[2], 'r') as message_file:
            message = message_file.read().strip()
    else:
        key = "SuperSecret!"
        message = "hello world"

    rc4 = RC4(key)

    # Generate and discard 256 bytes
    for _ in range(256):
        rc4.generate_byte()

    plaintext = message.encode('utf-8')
    rc4_stream = bytes([rc4.generate_byte() for _ in range(len(plaintext))])
    ciphertext = rc4.encrypt(plaintext)

    print_bytes("Initial string", plaintext)
    print_bytes("RC4 pseudorandom bytes", rc4_stream)
    print_bytes("Encrypted bytes", ciphertext)

if __name__ == "__main__":
    main()
